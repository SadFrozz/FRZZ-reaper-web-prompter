import os
import platform
import re
import sys
import socket
import shutil
import time
import threading

# --- –ö–û–ù–§–ò–ì–£–†–ê–¶–ò–Ø ---
ACTION_ID_BACKEND = "FRZZ_WEB_NOTES_READER"  # backend data/script processor
ACTION_ID_LAUNCH  = "FRZZ_NOTES_READER_LAUNCH"  # launcher front script
SCRIPT_BACKEND = "FRZZ_web_prompter_backend.lua"
SCRIPT_LAUNCH  = "FRZZ_web_prompter.lua"
WEB_INTERFACE_FILENAME = "prompter.html"
ACTION_LINE_TEMPLATE_BACKEND = 'SCR 4 0 {id} "Custom: Web Prompter Backend" {script}'
ACTION_LINE_TEMPLATE_LAUNCH  = 'SCR 4 0 {id} "Custom: Web Prompter Launch" {script}'

# --- –û–°–ù–û–í–ù–´–ï –§–£–ù–ö–¶–ò–ò ---

def get_base_path():
    if getattr(sys, 'frozen', False):
        return sys._MEIPASS
    else:
        return os.path.dirname(os.path.abspath(sys.argv[0]))

def get_prompter_title():
    default_title = "–ò–ù–¢–ï–†–ê–ö–¢–ò–í–ù–´–ô –¢–ï–ö–°–¢–û–í–´–ô –ú–û–ù–ò–¢–û–† –¥–ª—è REAPER" #
    try:
        html_path = os.path.join(get_base_path(), 'reaper_www_root', 'prompter.html')
        if not os.path.exists(html_path): return default_title
        with open(html_path, 'r', encoding='utf-8') as f: content = f.read()
        match = re.search(r'<title>(.*?)</title>', content, re.IGNORECASE)
        return match.group(1).strip() if match else default_title
    except Exception:
        return default_title

def copy_script_files(resource_path):
    print("\n---\nüîé –®–∞–≥ 0: –ö–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–æ–≤ (Scripts + reaper_www_root + UserPlugins)...")
    try:
        base_dir = get_base_path()
        source_scripts_dir = os.path.join(base_dir, 'Scripts')
        source_www_dir = os.path.join(base_dir, 'reaper_www_root')
        source_userplugins_dir = os.path.join(base_dir, 'UserPlugins')
        if not os.path.isdir(source_scripts_dir) or not os.path.isdir(source_www_dir):
            print(f"‚õîÔ∏è –û—à–∏–±–∫–∞: –ù–µ –Ω–∞–π–¥–µ–Ω—ã –ø–∞–ø–∫–∏ Scripts –∏–ª–∏ reaper_www_root —Ä—è–¥–æ–º —Å —É—Å—Ç–∞–Ω–æ–≤—â–∏–∫–æ–º!"); return False

        dest_scripts_dir = os.path.join(resource_path, 'Scripts')
        dest_www_dir = os.path.join(resource_path, 'reaper_www_root')
        dest_userplugins_dir = os.path.join(resource_path, 'UserPlugins')

        print(f"–ö–æ–ø–∏—Ä—É—é Scripts ‚Üí {dest_scripts_dir}")
        shutil.copytree(source_scripts_dir, dest_scripts_dir, dirs_exist_ok=True)
        print(f"–ö–æ–ø–∏—Ä—É—é WWW ‚Üí {dest_www_dir}")
        shutil.copytree(source_www_dir, dest_www_dir, dirs_exist_ok=True)

        if os.path.isdir(source_userplugins_dir):
            os.makedirs(dest_userplugins_dir, exist_ok=True)
            copy_userplugins_binaries(source_userplugins_dir, dest_userplugins_dir)
        else:
            print("(–ò–Ω—Ñ–æ) –ü–∞–ø–∫–∞ UserPlugins –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç ‚Äî –ø—Ä–æ–ø—É—Å–∫ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è –ø–ª–∞–≥–∏–Ω–∞ Reaper WebView.")

        print("‚úÖ –§–∞–π–ª—ã —É—Å–ø–µ—à–Ω–æ —Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω—ã."); return True
    except Exception as e:
        print(f"‚õîÔ∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–∏ —Ñ–∞–π–ª–æ–≤: {e}"); return False

def _sha256(path):
    """Return SHA256 hex digest of file or None if error."""
    import hashlib
    try:
        h = hashlib.sha256()
        with open(path, 'rb') as f:
            for chunk in iter(lambda: f.read(65536), b''):
                h.update(chunk)
        return h.hexdigest()
    except Exception:
        return None

def verify_usage_hint(resource_path):
    """Verify that key components were successfully copied (by hash equality) and print usage hint.

    Conditions:
      - Script FRZZ_web_prompter.lua copied (source & destination hashes match)
      - Plugin binary reaper_webview.(dll|dylib) copied and hashes match
      - On Windows only: WebView2Loader.dll copied and hashes match

    If all satisfied -> print the required instruction line in Russian.
    """
    base_dir = get_base_path()
    # Paths
    src_script = os.path.join(base_dir, 'Scripts', SCRIPT_LAUNCH)
    dst_script = os.path.join(resource_path, 'Scripts', SCRIPT_LAUNCH)
    system = platform.system()
    plugin_name = 'reaper_webview.dll' if system == 'Windows' else 'reaper_webview.dylib'
    src_plugin = os.path.join(base_dir, 'UserPlugins', plugin_name)
    dst_plugin = os.path.join(resource_path, 'UserPlugins', plugin_name)
    loader_name = 'WebView2Loader.dll' if system == 'Windows' else None
    if loader_name:
        src_loader = os.path.join(base_dir, 'UserPlugins', loader_name)
        dst_loader = os.path.join(resource_path, 'UserPlugins', loader_name)
    # Compute hashes
    script_ok = os.path.exists(src_script) and os.path.exists(dst_script) and _sha256(src_script) == _sha256(dst_script)
    plugin_ok = os.path.exists(src_plugin) and os.path.exists(dst_plugin) and _sha256(src_plugin) == _sha256(dst_plugin)
    loader_ok = True
    if loader_name:
        loader_ok = os.path.exists(src_loader) and os.path.exists(dst_loader) and _sha256(src_loader) == _sha256(dst_loader)
    if script_ok and plugin_ok and loader_ok:
        print("\n‚ÑπÔ∏è  –î–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤–Ω—É—Ç—Ä–∏ Reaper –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ Web Prompter Launch")
        return True
    return False

def get_reaper_resource_path():
    system = platform.system()
    default_path = ""
    if system == "Windows": default_path = os.path.join(os.environ['APPDATA'], 'REAPER')
    elif system == "Darwin": default_path = os.path.join(os.path.expanduser('~'), 'Library', 'Application Support', 'REAPER')
    if os.path.isdir(default_path) and os.path.exists(os.path.join(default_path, 'reaper.ini')):
        print(f"‚úÖ –ü–∞–ø–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ REAPER –Ω–∞–π–¥–µ–Ω–∞: {default_path}")
        print("\n   => –ù–∞–∂–º–∏—Ç–µ Enter –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è —Å —ç—Ç–æ–π –ø–∞–ø–∫–æ–π.")
        choice = input("   => –ò–ª–∏ –Ω–∞–∂–º–∏—Ç–µ '1', —á—Ç–æ–±—ã —É–∫–∞–∑–∞—Ç—å –¥—Ä—É–≥–æ–π –ø—É—Ç—å: ")
        if choice != '1':
            print("–°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π –ø—É—Ç—å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω."); return default_path
        else:
            print("\n–í—ã–±—Ä–∞–Ω —Ä—É—á–Ω–æ–π –≤–≤–æ–¥ –ø—É—Ç–∏.")
    else:
        print("‚ùå –ü–∞–ø–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ REAPER –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –ø–æ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–º—É –ø—É—Ç–∏.")
    while True:
        user_path = input("\n–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –ø–æ–ª–Ω—ã–π –ø—É—Ç—å –∫ –ø–∞–ø–∫–µ —Ä–µ—Å—É—Ä—Å–æ–≤ REAPER: ")
        if os.path.isdir(user_path) and os.path.exists(os.path.join(user_path, 'reaper.ini')):
            print(f"‚úÖ –ü—É—Ç—å –ø—Ä–∏–Ω—è—Ç: {user_path}"); return user_path
        else:
            print("‚õîÔ∏è –£–∫–∞–∑–∞–Ω–Ω—ã–π –ø—É—Ç—å –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–µ–Ω –∏–ª–∏ –≤ –Ω–µ–º –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç —Ñ–∞–π–ª 'reaper.ini'. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")

def _ensure_action(lines, action_id, script_name, template):
    action_line = template.format(id=action_id, script=script_name)
    modified = False
    found_script_idx = -1
    found_id_idx = -1
    for i, line in enumerate(lines):
        if script_name in line: found_script_idx = i
        if action_id in line: found_id_idx = i
    if found_script_idx != -1:
        if action_id not in lines[found_script_idx]:
            print(f"–ò—Å–ø—Ä–∞–≤–ª—è—é ID –¥–ª—è —Å–∫—Ä–∏–ø—Ç–∞ {script_name} ‚Üí {action_id}")
            lines[found_script_idx] = action_line + '\n'; modified = True
        else:
            print(f"‚úÖ Action {action_id} –¥–ª—è {script_name} —É–∂–µ –∫–æ—Ä—Ä–µ–∫—Ç–µ–Ω.")
    elif found_id_idx != -1:
        print(f"–û–±–Ω–æ–≤–ª—è—é —Å—Ç—Ä–æ–∫—É action {action_id} –ø–æ–¥ –Ω–æ–≤—ã–π —Å–∫—Ä–∏–ø—Ç {script_name}")
        lines[found_id_idx] = action_line + '\n'; modified = True
    else:
        print(f"–î–æ–±–∞–≤–ª—è—é action {action_id} –¥–ª—è {script_name}")
        lines.append(action_line + '\n'); modified = True
    return modified

def process_keymap_file(resource_path):
    keymap_path = os.path.join(resource_path, 'reaper-kb.ini')
    print("\n---\nüîé –®–∞–≥ 1: –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ñ–∞–π–ª–∞ –≥–æ—Ä—è—á–∏—Ö –∫–ª–∞–≤–∏—à (reaper-kb.ini)...")
    if not os.path.exists(keymap_path):
        print(f"‚ö†Ô∏è –§–∞–π–ª {keymap_path} –Ω–µ –Ω–∞–π–¥–µ–Ω. –°–æ–∑–¥–∞—é –Ω–æ–≤—ã–π...")
        with open(keymap_path, 'w', encoding='utf-8') as f:
            f.write(ACTION_LINE_TEMPLATE_BACKEND.format(id=ACTION_ID_BACKEND, script=SCRIPT_BACKEND) + '\n')
            f.write(ACTION_LINE_TEMPLATE_LAUNCH.format(id=ACTION_ID_LAUNCH, script=SCRIPT_LAUNCH) + '\n')
        print("‚úÖ –§–∞–π–ª reaper-kb.ini —Å–æ–∑–¥–∞–Ω –∏ –æ–±–Ω–æ–≤–ª–µ–Ω (2 actions)."); return
    try:
        with open(keymap_path, 'r', encoding='utf-8') as f: lines = f.readlines()
        modified_backend = _ensure_action(lines, ACTION_ID_BACKEND, SCRIPT_BACKEND, ACTION_LINE_TEMPLATE_BACKEND)
        modified_launch  = _ensure_action(lines, ACTION_ID_LAUNCH,  SCRIPT_LAUNCH,  ACTION_LINE_TEMPLATE_LAUNCH)
        if modified_backend or modified_launch:
            with open(keymap_path, 'w', encoding='utf-8') as f: f.writelines(lines)
            print("‚úÖ –§–∞–π–ª reaper-kb.ini –æ–±–Ω–æ–≤–ª—ë–Ω.")
    except Exception as e:
        print(f"‚õîÔ∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞–±–æ—Ç–µ —Å —Ñ–∞–π–ª–æ–º reaper-kb.ini: {e}")

def copy_userplugins_binaries(src_dir, dst_dir):
    print("üîß –ö–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ –±–∏–Ω–∞—Ä–µ–π UserPlugins (—Å –ø—Ä–æ–≤–µ—Ä–∫–æ–π —Ö–µ—à–∞)...")
    import hashlib
    system = platform.system()
    pattern = '.dll' if system == 'Windows' else '.dylib'
    # –°–æ–±–∏—Ä–∞–µ–º —Å–ø–∏—Å–æ–∫ –∏—Å—Ö–æ–¥–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤
    src_files = [f for f in os.listdir(src_dir) if f.lower().endswith(pattern)]
    if not src_files:
        print(f"(–ò–Ω—Ñ–æ) –ù–µ—Ç —Ñ–∞–π–ª–æ–≤ *{pattern} –¥–ª—è –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è.")
        return

    def sha256_of(path):
        try:
            h = hashlib.sha256()
            with open(path, 'rb') as fp:
                for chunk in iter(lambda: fp.read(65536), b''):
                    h.update(chunk)
            return h.hexdigest()
        except Exception:
            return None

    for fname in src_files:
        src_path = os.path.join(src_dir, fname)
        dst_path = os.path.join(dst_dir, fname)
        src_hash = sha256_of(src_path)
        dst_hash = sha256_of(dst_path) if os.path.exists(dst_path) else None
        if dst_hash and src_hash == dst_hash:
            print(f"‚è≠  {fname} ‚Äî —É–∂–µ –∞–∫—Ç—É–∞–ª–µ–Ω (hash —Å–æ–≤–ø–∞–¥–∞–µ—Ç). –ü—Ä–æ–ø—É—Å–∫.")
            continue

        while True:
            try:
                shutil.copy2(src_path, dst_path)
                print(f"‚úÖ –°–∫–æ–ø–∏—Ä–æ–≤–∞–Ω {fname} (hash: {src_hash[:8]}‚Ä¶)")
                break
            except PermissionError:
                print(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–º–µ–Ω–∏—Ç—å {fname} ‚Äî —Ñ–∞–π–ª –∑–∞–Ω—è—Ç (–≤–æ–∑–º–æ–∂–Ω–æ, REAPER –∑–∞–ø—É—â–µ–Ω).")
                choice = input("–ó–∞–∫—Ä–æ–π—Ç–µ REAPER –∏ –≤—ã–±–µ—Ä–∏—Ç–µ: [R]etry / [S]kip / [A]bort: ").strip().lower()
                if choice.startswith('r'):
                    continue
                elif choice.startswith('s'):
                    print(f"–ü—Ä–æ–ø—É—Å–∫ —Ñ–∞–π–ª–∞ {fname} –ø–æ –∑–∞–ø—Ä–æ—Å—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.")
                    break
                else:
                    print("–ü—Ä–µ—Ä—ã–≤–∞–Ω–∏–µ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º.")
                    sys.exit(1)
            except Exception as ex:
                print(f"‚õîÔ∏è –û—à–∏–±–∫–∞ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è {fname}: {ex}")
                break

def get_local_ip():
    s = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    try: s.connect(('10.255.255.255', 1)); IP = s.getsockname()[0]
    except Exception: IP = '127.0.0.1'
    finally: s.close()
    return IP

def process_web_interface_settings(resource_path):
    reaper_ini_path = os.path.join(resource_path, 'reaper.ini')
    print("\n---\nüîé –®–∞–≥ 2: –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞—Å—Ç—Ä–æ–µ–∫ REAPER (reaper.ini)...")
    if not os.path.exists(reaper_ini_path):
        print(f"‚õîÔ∏è –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: –§–∞–π–ª {reaper_ini_path} –Ω–µ –Ω–∞–π–¥–µ–Ω!"); return
    try:
        with open(reaper_ini_path, 'r', encoding='utf-8', errors='ignore') as f: lines = f.readlines()
        original_lines = list(lines)
        csurfrate_found = False
        for i, line in enumerate(lines):
            if line.strip().startswith('csurfrate='):
                csurfrate_found = True
                try:
                    value = int(line.strip().split('=')[1])
                    if value < 100: print(f"–ó–Ω–∞—á–µ–Ω–∏–µ csurfrate ({value}) –Ω–∏–∂–µ 100. –ò—Å–ø—Ä–∞–≤–ª—è—é –Ω–∞ 100."); lines[i] = 'csurfrate=100\n'
                except (ValueError, IndexError): print(f"–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è —Å—Ç—Ä–æ–∫–∞ csurfrate. –ò—Å–ø—Ä–∞–≤–ª—è—é –Ω–∞ 100."); lines[i] = 'csurfrate=100\n'
                break
        if not csurfrate_found:
            print("–ü–∞—Ä–∞–º–µ—Ç—Ä csurfrate –Ω–µ –Ω–∞–π–¥–µ–Ω. –î–æ–±–∞–≤–ª—è—é —Å–æ –∑–Ω–∞—á–µ–Ω–∏–µ–º 100.")
            try:
                reaper_section_pos = next(i for i, line in enumerate(lines) if line.strip().lower() == '[reaper]')
                lines.insert(reaper_section_pos + 1, 'csurfrate=100\n')
            except StopIteration: print("‚ö†Ô∏è –°–µ–∫—Ü–∏—è [REAPER] –Ω–µ –Ω–∞–π–¥–µ–Ω–∞. –î–æ–±–∞–≤–ª—è—é csurfrate –≤ –∫–æ–Ω–µ—Ü —Ñ–∞–π–ª–∞."); lines.append('csurfrate=100\n')
        prompter_interface_exists = False
        search_pattern = f"'{WEB_INTERFACE_FILENAME}'"
        for line in lines:
            if line.strip().startswith('csurf_') and search_pattern in line:
                print("‚úÖ –í–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –¥–ª—è —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ –º–æ–Ω–∏—Ç–æ—Ä–∞ —É–∂–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω."); prompter_interface_exists = True; break # <-- –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–æ
        if not prompter_interface_exists:
            print(f"–í–µ–±-—Å–µ—Ä–≤–µ—Ä, –∏—Å–ø–æ–ª—å–∑—É—é—â–∏–π '{WEB_INTERFACE_FILENAME}', –Ω–µ –Ω–∞–π–¥–µ–Ω.")
            choice = input("–•–æ—Ç–∏—Ç–µ —Å–æ–∑–¥–∞—Ç—å –µ–≥–æ —Å–µ–π—á–∞—Å? (–¥–∞/–Ω–µ—Ç): ").lower()
            if choice in ['–¥–∞', '–¥', 'yes', 'y']:
                port = 0
                while not (1024 <= port <= 65535):
                    try: port_str = input("–í–≤–µ–¥–∏—Ç–µ –ø–æ—Ä—Ç –¥–ª—è –≤–µ–±-—Å–µ—Ä–≤–µ—Ä–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä, 8080): "); port = int(port_str)
                    except ValueError: print("‚õîÔ∏è –≠—Ç–æ –Ω–µ –ø–æ—Ö–æ–∂–µ –Ω–∞ —á–∏—Å–ª–æ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
                content_for_search = "".join(lines)
                indices = [int(i) for i in re.findall(r'^csurf_(\d+)=', content_for_search, re.MULTILINE)]
                next_index = max(indices) + 1 if indices else 0
                new_count = next_index + 1; count_found = False
                for i, line in enumerate(lines):
                    if line.strip().startswith('csurf_cnt='): lines[i] = f"csurf_cnt={new_count}\n"; count_found = True; break
                new_csurf_line = f"csurf_{next_index}=HTTP 0 {port} '' '{WEB_INTERFACE_FILENAME}' 1 ''\n"
                insert_pos = -1
                if indices:
                    last_csurf_line = f'csurf_{max(indices)}='
                    for i, line in reversed(list(enumerate(lines))):
                        if line.strip().startswith(last_csurf_line): insert_pos = i + 1; break
                if insert_pos != -1: lines.insert(insert_pos, new_csurf_line)
                else:
                    try:
                        reaper_section_pos = next(i for i, line in enumerate(lines) if line.strip().lower() == '[reaper]')
                        if not count_found: lines.insert(reaper_section_pos + 1, f"csurf_cnt={new_count}\n"); lines.insert(reaper_section_pos + 2, new_csurf_line)
                        else: lines.insert(reaper_section_pos + 1, new_csurf_line)
                    except StopIteration:
                        print("‚ö†Ô∏è –°–µ–∫—Ü–∏—è [REAPER] –Ω–µ –Ω–∞–π–¥–µ–Ω–∞. –î–æ–±–∞–≤–ª—è—é –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –≤ –∫–æ–Ω–µ—Ü —Ñ–∞–π–ª–∞.")
                        if not count_found: lines.append(f"csurf_cnt={new_count}\n"); lines.append(new_csurf_line)
                local_ip = get_local_ip()
                print("\n" + "="*60); print("‚úÖ –í–µ–±-—Å–µ—Ä–≤–µ—Ä —É—Å–ø–µ—à–Ω–æ –Ω–∞—Å—Ç—Ä–æ–µ–Ω!"); print("–ò–ù–¢–ï–†–ê–ö–¢–ò–í–ù–´–ô –¢–ï–ö–°–¢–û–í–´–ô –ú–û–ù–ò–¢–û–† –±—É–¥–µ—Ç –¥–æ—Å—Ç—É–ø–µ–Ω –ø–æ –∞–¥—Ä–µ—Å—É:"); print(f"  -> http://localhost:{port}"); print(f"  -> http://{local_ip}:{port} (—Å –ª—é–±–æ–≥–æ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞ –≤ –≤–∞—à–µ–π –ª–æ–∫–∞–ª—å–Ω–æ–π —Å–µ—Ç–∏)"); print("–≠—Ç–∞ —Ñ—É–Ω–∫—Ü–∏—è –±—É–¥–µ—Ç —Ä–∞–±–æ—Ç–∞—Ç—å, –ø–æ–∫–∞ –∑–∞–ø—É—â–µ–Ω REAPER."); print("="*60)
            else: print("–û—Ç–º–µ–Ω–µ–Ω–æ. –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –≤–µ–±-—Å–µ—Ä–≤–µ—Ä–∞ –ø—Ä–æ–ø—É—â–µ–Ω–∞.")
        if lines != original_lines:
            print("\n–°–æ—Ö—Ä–∞–Ω—è—é –∏–∑–º–µ–Ω–µ–Ω–∏—è –≤ reaper.ini...")
            with open(reaper_ini_path, 'w', encoding='utf-8', errors='ignore') as f: f.writelines(lines)
            print("‚úÖ –§–∞–π–ª reaper.ini —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω.")
    except Exception as e: print(f"‚õîÔ∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞–±–æ—Ç–µ —Å —Ñ–∞–π–ª–æ–º reaper.ini: {e}")

def prompt_to_close(timeout=30):
    def wait_for_input():
        input(); os._exit(0)
    input_thread = threading.Thread(target=wait_for_input, daemon=True)
    input_thread.start()
    print("\nüéâ –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞! –ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç–µ REAPER, —á—Ç–æ–±—ã –≤—Å–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è –≤—Å—Ç—É–ø–∏–ª–∏ –≤ —Å–∏–ª—É.")
    print("   –î–ª—è –∑–∞–∫—Ä—ã—Ç–∏—è –æ–∫–Ω–∞ –Ω–∞–∂–º–∏—Ç–µ Enter...")
    for i in range(timeout, 0, -1):
        sys.stdout.write(f"\r   ...–∏–ª–∏ –æ–∫–Ω–æ –∑–∞–∫—Ä–æ–µ—Ç—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —á–µ—Ä–µ–∑ {i:02d} —Å–µ–∫—É–Ω–¥. ")
        sys.stdout.flush(); time.sleep(1)
    print("\r   ...–≤—Ä–µ–º—è –≤—ã—à–ª–æ.                                              ")

# --- –¢–û–ß–ö–ê –í–•–û–î–ê –í –°–ö–†–ò–ü–¢ ---
if __name__ == "__main__":
    title = get_prompter_title()
    print("="*60); print(f"–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π —É—Å—Ç–∞–Ω–æ–≤—â–∏–∫ –¥–ª—è: {title}"); print("="*60)
    
    resource_folder = get_reaper_resource_path()
    
    if resource_folder:
        if not copy_script_files(resource_folder):
             sys.exit("–£—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø—Ä–µ—Ä–≤–∞–Ω–∞ –∏–∑-–∑–∞ –æ—à–∏–±–∫–∏ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è —Ñ–∞–π–ª–æ–≤.")
        process_keymap_file(resource_folder)
        process_web_interface_settings(resource_folder)
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ–¥—Å–∫–∞–∑–∫—É –ø–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –≤—Å–µ –∫–ª—é—á–µ–≤—ã–µ —Ñ–∞–π–ª—ã –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ —Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω—ã
        verify_usage_hint(resource_folder)
        prompt_to_close(30)
    else:
        print("–ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –ø–∞–ø–∫—É —Ä–µ—Å—É—Ä—Å–æ–≤ REAPER. –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø—Ä–µ—Ä–≤–∞–Ω–∞.")
        input("\n–ù–∞–∂–º–∏—Ç–µ Enter –¥–ª—è –≤—ã—Ö–æ–¥–∞.")